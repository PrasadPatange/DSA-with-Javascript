          DATA STRUCTURE AND ALGORITHM (DSA)
                  With JavaScript.

1) What is Data Structure ?
    -> Way to organize data so that we can use this data efficiently.
    -> Example :-
                [8,2,1,6,0,4,3,7,5]
                After Applyig DSA
                [0,1,2,3,4,5,6,7,8]

2) What is Algorithm ?
    -> Steps or a process to arrange Data.
    -> Steps to structured data from unstructured data. 
    -> Example :-
                [8,2,1,6,0,4,3,7,5]
                After Applyig DSA
                [0,1,2,3,4,5,6,7,8]

--------------------------------------------------------------------------------------------------------------------------------------

                                                    Data Structure
                                                        |
                    ----------------------------------------------------------------------------
                    |                                                                          |
            Primitive Data Structure                                       Non-Primitive Data Structure                                    
                    |                                                                          |
            ------------------------------------------                 ----------------------------------------------   
            |           |              |             |                 |                     |                      |
            Integer     Float        Character      Pointer         Arrays                   Lists                  Files
                                                                                            |
                                                                        ------------------------------------------------
                                                                        |                                              |
                                                                Linear Lists                               Non-Linear Lists
                                                                        |                                              |
                                                            ----------------------                         -------------------------
                                                            |                    |                         |                       |
                                                        Stacks               Queues                    Graphs                  Trees

---------------------------------------------------------------------------------------------------------------------------------------

3) Operations Of Data Structre :

   -> 1) Traversal(Iterate)
   -> 2) Insertion 
   -> 3) Deletion
   -> 4) Searching 
   -> 5) Sorting
   -> 6) Merging

Different Algorithm can be use for Options.

4) Operations Of Data Structres :
  -> 1) Array
  -> 2) Stack
  -> 3) Queue
  -> 4) Tree
  -> 5) Graph 
  -> 6) Insertion
  -> 7) Recursion
  -> 8) Search
  -> 9) Sorting
  -> 10) Merge
  -> 11) Map
  -> 12) Set

5) Couse ++ :-
  * Logical Part
    -> Nested Loops
    -> Lowest and Highest Value
    -> Objects
    -> Update Specific Value
       etc.

6) Array Traversing and Accessing :-
   -> Make HTML Page with Basic Array.
   -> Traversing with Loop.
   -> Accessing Elements.
   -> Access element with text input and button.
   -> Validation.

7) Insert Element in Array :-
   -> Make Array, define the position.
   -> Use Loop to insert new Element.
   -> Insert Element with text input and button.
   -> Insert Element with bydefault function Ex:- splice()

8) Delete Element in Array :-
   -> Make Array, define the position.
   -> Use Loop to delete new Element.
   -> Delete Element with text input and button.
   -> Delete Element with bydefault function Ex:- splice()

9) Search Element in Array (Basic Linear) :-
   -> Make Array, define the SearchItem.
   -> Use Loop to Search new Element.
   -> Search Element with text input and button.
   -> Search Element with bydefault function Ex:- indexOf()

10) Merge Two Array :-
   -> Make Three Arrays.
   -> Use 2 Different Loop to Merge Element.
   -> Shortcut for Merge Array(Default Function)
   -> Shortcut for Reverse Array Element(Default Function)

11) Merge Two Array (While Loop) :-
   -> Make Three Arrays.
   -> Use While Loop to Merge Element.

   -> Compare this Logic with Last one.
      -> 1) Space Complexity = memory (less)
      -> 2) Time Complexity  = number of lines (less)

      comapare : 
     * A) Merge Two Array(for loop) :
          1) Time Complexity : 
             10 lines + loops iterate array 6+4 = 10 total = 20 Lines
          2) Space Complexity :
            variables data1,data2,MergeArr,i ----- 4 memory space

     * B) Merge Two Array(while loop) :
         1) Time Complexity : 
            22 lines + loops iterate array 6+4 = 10 total = 32 Lines
         2) Space Complexity :
            variables data1,data2,data3,d1,d2,d3 ----- 6

   * As compare to A and B for loop best for space and time Complexity in case
     of normal array Merge
   * But if we want to merge and sort array then B i.e using While loop is better than A.

 12) ALGORITHM COMPLEXITY :-
      1) Algorithm Basics
      2) What is Algorithm Complexity

        (1) Time Complexity :
           -> The Time Complexity is mainly calculated by counting the number of steps to finish the exection.

         (2) Space Complexity :
           -> Space Complexity is the amount of space required to solve a problem.
           -> Space Complexity = Auxiliary space + Input Size.
           
         (3) Big O notation : Use to denote Complexity(both).

13) Array Sorting ( Bubble Sort ) :-
     1) Basic Understanding
     2) Write Code and Understand step by step
     
14) Recursion Data Structre :-
     1) What is Recursion Data Structre.
      -> Re Called Function (Khudko bar bar Call krna).
      ->Recursion is a process of calling itself. A function that calls itself is called a recursive function.
    Example :
   1) 
      funtion apple(){
         ....
         ....
         apple();    //Infinite loop
      }
      apple();
    2)
      funtion apple(){
         ....
         ....
         if(condition){
         apple();    //To avoid Infinite loop use proper condition
         }
      }
      apple();

15) While Loop With Array Of Strings :-
Example :-
    let dataString = ["Sachin", "Virat", "Rohit", "Dhoni"];
    let i = 0;
    while (i < dataString.length) {
        console.log(dataString[i]);
        i++;
    }

16) Indirect Recursion Data Structre :-
     1) What is Indirect Recursion Data Structre.
      ->  Called Function inside Another Function
    Example :
            1) 
               funtion apple(){
                  ....
                  ....
                  if(condition){
                  banana();    
                  }
               }
               apple();
            
               funtion banana(){
                  ....
                  ....
                  if(condition){
                  apple();   
                  }
               }
      banana();

17) Recursion Array With Reverse :-
    1) Understand how logic will work.
    2)Implement Code.
    3)Test with the different arrays.
    4)Javascript Default function for reverse array.

18) Head and Tail Recursion :-
    1) Head Recursion :
     -> Recursion function before condition
      Ex :
        function test(x){
         console.log(x); //before condition
         if(x>0){
            test(x-1);
         }
        }
        test(5);
    2) Tail Recursion :
     -> Recursion function after condition
           Ex :
        function test(x){
         if(x>0){
            test(x-1);
         }
         console.log(x); // After condition
        }
        test(5);

19) Stack With Javascript :-
   1) What is Stack :
      ->  It is a Linear Data Structure.
      -> FIFO = First In First Out.
      -> LIFO = Last  In First Out.
      -> Also Set Max Value Of Stack.
   2) Push Element in Stack :
      -> Push new Element at top of the Stack.
   3) Pop Element in Stack :
      -> Remove Element at top of the Stack.

20) Stack With Input and Buttons :-
   1) Print Function.
   2) Add text input and buttons for push , pop.
   3) Operations with Buttons.
   4) Test All Operations.

21) Reverse String with Stack :-
   1) Understand Logic for reverse string with Stack
   2) Make stack push and pop both Operations
   3) Define string and convert to Array
   4) push and pop string to stack
   6) Get reverse string back from stack
   7) JavaScript function
   8) Test All Operations

22) Stack with class :-
   1) Understand logic to implement stack with class.
   2) Make stak class.
   3) Make push and pop both functions for operations.
   4) Test Stack operations with console.

********** Queue *********************************** 
23) Queue with Javascript :-
   1) Understand what is Queue.
     -> Linear Data Structre.
     -> FIFO =>  First In First Out.
     -> 1) enqueue => Add element (front) in queue.
     -> 2) dequeue => Remove element (end).
   2) Understand enqueue and dequeue operations.
   3) Implement enqueue and dequeue functions for operations.
   4) Test Queue operations with console.

24) More Operations and Input in Queue :-
   1) Front , Rear and isEmpty Operatons.
   2) Do Operations with inputs.
   3) Test All Operatons.

25) Circular Queue in Javascript :- 
   1) Understand Circular Queue.
   2) Make class for Queue.
   3) Enqueue and Dequeue Operations.
   4) Text Flow.

*********** Searching Algorithm **************
Important for Front End Developer : Searching,sorting,array
26) Search Algorithm in DA :-
   1) What is search and search Algorithm.
   2) Understand Linear search.
   3) The Complexity of linear search.
     -> time Complexity => f(n) n = input
     -> Linear Search Complexity = f(n) = O(n)  (because it use single for loop)
   4) Implement linear algorithm.
   5) Implement linear algorithm with inputs also.

Important for Interview :
 Binary Search :-
 1) Iterative Approach
 2) Recursive Approach

27) Binary Search with Iterative Approach :- 
   1) How binary search works.
   2) What is iterative Approach.
   3) Implement binary search Algorithm.
   4) Implement binary search Algorithm with input also.

28) Binary Search with Recursive Approach :-
   1) How binary search works.
   2) What is recursive Approach.
   3) Implement Binary Search with Recursion.
   4) Implement Binary Algorithm with Inputs also.

********** Sorting Algorithm ***************************
Important for Front End Developer : Searching,sorting,array

29) Selection Sort With Javascript :-
   1) How selection sorting works.
   2) Implement Selection sort.
   3) Time Complexity.
     -> Complexity = O(n**2); (beacuse it has 2 for loop)

30) Descending Order Sorting :- 
   1) Recap Selection Sorting.
   2) Two ways of Descending Order.
   3) Implement Descending Sorting both way.

31) Insertion Sort :-
   1) How Insertion Sort Works.
   2) Implement Insertion Sort Code.

32) Bubble Sort with Recursion :-
   1) How Bubble Sort Works.
   2) Understand Logic.
   3) Implement Code.

********* Problem Solving and Logic Building ****************

33) Problem Solving and Logic Building :-
   1) Undrstand Complete Problem.
   2) Find Solution in General way.
   3) Break the Problem in Parts.
   4) Think Coding Solution.
   5) Re-Analyse Solution.
   6) Then Write Code.
   7) Example.

********** String *************************************
Interview :-
34) Check Strings are Anagram :-
   1) What is Anagram?
    -> Two Strings has same character called Anagram.
    -> Anagram strings are two strings built up by the same set of characters, 
       where the order of characters is the only difference in the strings.
    -> Ex : cat => act,tca,tac ; listen => silent ; heart => earth
   2) Understand Logic.
   3) Write Program to check Anagram.
   4) Test with Different String.

35) Check String Palindrome or Not :-
   1) What is Palindrome?
     -> A string is called a palindrome string if the reverse of that string is the same as the original string.
     -> For example, radar , level , etc
   2) Understand Logic.
   3) Write Program to Check Palindrome.
   4) Test with Different String.

36) Maximum Occurring Character in String :-
   1) Understand Logic?
   2) Write Program.
   3) Test with different String.

************** Object DSA *************************
37) Object ( Hash Table ) Data Structre in JS :-
   1) What is Object 
     -> store data in key,Value pair
     -> Ex: { name:"prasad', age:"20" };
     -> In Object only use key as a string
   2) How to make Object
   3) Crud on Object
   4) Loop on Object
   5) Important function with Object
***************************************************
MAP and SET Data Structre not use in all Programming Languages
************* Map DSA ******************************
38) Map Data Structure : 
    1) What is Map
      -> key value pair but not same as object.
       -> Ex: { name => "prasad", age:"20" };
        -> In Map we use key as any data type
        -> Here Map is not a function i.e. in js map()

    2) Difference Between Map and Object
     ->
        Object                                Map
      1) store data in key,Value pair         1) key value pair but not same as object.
      2) Ex: { name:"prasad', age:"20" };     2) Ex: { name => "prasad", age => "20" };
      3) In Object only use key as a string.  3) In Map we use key as any data type.

    3) CRUD with Map
    4) Loop with Map
    5) Important function with Object 

************* Set DSA **************************************
39) Set Data Structure :
   1) What is set  
    -> it is similar to array but advance it remove duplicate values.
   2) Difference Between Set and Array 
   3) CRUD with set
   4) Loop with set
   5) Important Function with set.

************** String Interview Questions ************************
40) String Interview Questions :
1) convert str in only 1 array.
2) convert string to array with reach character.
3) convert string to array with space or any sequence.
4) replace any character.
5) Get substring from string.
6) remove last character.
7) remove first character.
8) remove string before spacific character.
9) Reverse String.
10) remove extra space from both sides. 

*********** Linked List ******************************
41) Make Linked List in Javascript :
1) How Linked List Work.
2) Understand the Logic of Link List.
3) Write Program for Linked List.
4) insert Nodes and Test.

-------------------         --------------------       ------------------
|  val   | next    | -----> |  val   | next    | ----> | val | null     |
-------------------         --------------------       ------------------
  (Head) node                                               (Tail) node

next => Address of next node

In Javascript node is display using Object : 

val | next   =>  
{
   value  : 100,
   next : #aqrtq
}
sequence :
{
   value  : 100,
   next : {
      value : 200,
      next : {
         ... null
      }
   }
}

42) Traversing Linked List : 
1) Understand Logic.
2) Write Function for Traversing.
3) Print Nodes.

43) Remove Node From Linked List :
1) Understand Logic.
2) Write Function for Remove Node.
3) Check Nodes.

44) Insert Node at any Position in Linked List :
1) Understand Logic.
2) Write Function for Linked List.
3) Insert Nodes and Test.

45) Search Node in Linked List :
1) Understand Logic.
2) Write Function for Search Node.
3) Check Result.

******** Tree Data Structure ***********************
46) Tree DSA in Javascript : 
1) What is Tree DS :
  => Non-Linear Data Structre.
  => Tree is a Hierarchical representation of data in the form of node and edges.
  => Tree use in For ex: DOM .

2) What is Binary Tree :
  => Maximum 2 nodes (left and Right Side)

3) What is Binary Search Tree :
  => Left Node < Root < Right Node
  => Binary Search Tree :
      
               (10)
               /   \
  left node   (5)   (15)    right node
      
      
4) Important Terminology for Tree :
  => Tree :
                        (A)     -> Root Node      [Level 1]
                       /   \    -> Edge
                     (B)   (C)  -> Node           [Level 2]
                   /   \    /  \
                 (D)   (E)  (F)  (H)              [Level 3]
                 /      \          \
               (J)      (K)        (I)            [Level 4]

   => Terminology :
     (1) A => Root Node.
     (2) Child of A => B and C.
     (3) Sibling of B => C.
     (4) Sibling of E => D.
     (5) Degree of Node C => 2 (F and H).
     (6) Degree of Node H => 1 (I).
     (7) Termial Node => J , K , F , I .
     (8) K path => A-B-E .
     
5) Operations of BST 
6) Understand All Things.

47) Start with Binary Search Tree :
1) Make Class for BST.
2) Define Empty Tree.
3) Check BST is Empty.
4) Make Node Class.

48) Insert Node in BST :
 1) Understand Logic.
 2) Add root node.
 3) Add left node.
 4) Add right node.

 49) Search Node in BST :
 1) Understand Logic.
 2) Make Search Function.
 3) Match Node with the given code.
 4) Test Search node logic.

50) Depth First Search (DFS) in Tree :
 1) Traversing Tree :
   ->  visit each node.

   Approach :
 2) PreOrder : Rt-L-L-R R-L-R
   ->
                  (20)
                /      \
  left node   (10)     (30)    right node
              /   \    /   \
            (5)  (11)  (23)  (40)

   output : 20,10,5,11,30,23,40

 3) InOrder :  depth - L-Rt-R-Rt- depth - L-Rt-R 
   ->
                  (20)
                /      \
  left node   (10)     (30)    right node
              /   \    /   \
            (5)  (11)  (23)  (40)

   output : 5,10,11,20,23,30,40

 4) PostOrder : depth L-R-Rt    depth L-R-Rt   main Root
   ->
                  (20)
                /      \
  left node   (10)     (30)    right node
              /   \    /   \
            (5)  (11)  (23)  (40)

   output : 5,11,10,23,40,30,20

 5) Write Code.
 6) Test Flow.

51) Breadth First Search  (BFS) in Tree :
1) How it Working : 
  -> Traverse Level-by-level.

2) Write Program.
3) Test Flow.

->  
                  (20)     -> level 1
                /      \
  left node   (10)     (30)    right node  -> level 2
              /   \    /   \
            (5)  (11)  (23)  (40)    ->  level 3

      Take Queue : 
      Travsersing :
      [20] -> 20 out
      [10,30] -> 10 out
      [30,5,11,23,40] -> 30 out
      [5,11,23,40] -> 5 out
      [11,23,40] -> 11 out
      [23,40] -> 23 out
      [40] -> 40 out

-> Output : 20,10,30,5,11,23,40

52) Min and Max in Binary Search Tree :
 1) Understand Logic.
 2) Write Code for Find Min Value. 
  -> Left most node.
 3) Write Code for Find Max Value.
  -> Right most node.
  -> Right most node.
 4) Check Result.


 ********** Asymptotic analysis and Notation ********
 54)  Asymptotic analysis and Notation :
  1) f(n) = 5n**2 + 6n + 12
  2) What is Asymptotic Analysis ?
  3) How to calculate Time Complexity.
  4) Asymptotic Notations.

  * number of line execute => Time Complexity
  * variables, space => Space Complexity