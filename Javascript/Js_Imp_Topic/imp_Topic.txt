
1. Temporal Dead Zone :
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz

2. Closure :
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

3. JavaScript :
https://developer.mozilla.org/en-US/docs/Web/JavaScript

4. Hoisting :
 Hoisting : Variable can be used before it has been declared.

5. Temporal Dead Zone :
- Temporal Dead Zone is the period of time during which the let and const declarations cannot be accessed.
- Temporal Dead Zone starts when the code execution enters the block which contains the let or const declaration and continues until the declaration has executed.  
-  Temporal deadzone is a time . since when this let variable are hoisted.

6. Lexical Scope :
 - Lexical scope is the definition area of an expression.
  In other words, an item's lexical scope is the place in which the item got created.
- JavaScript uses lexical scoping to resolve the variable names when a function is created inside another function. 
  It determines the function's parent scope by looking at where the function was created instead of where it was invoked.
- Lexical scope means that in a nested group of functions, the inner functions have access to the variables and other resources of their parent scope. This means that the child's functions are lexically bound to the execution context of their parents.
 Lexical scope is sometimes also referred to as static scope.

7. Closure : 
- A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
In other words, a closure gives you access to an outer function's scope from an inner function. 
In JavaScript, closures are created every time a function is created, at function creation time.

- A closure is the combination of a function and the lexical environment within which that function was declared. 
