HTML 5 Interview Questions : 
https://www.interviewbit.com/html-interview-questions/

https://www.softwaretestinghelp.com/html5-interview-questions/

CSS Interview Questions :
https://www.interviewbit.com/css-interview-questions/


Javascript Interview Questions : 
https://www.interviewbit.com/javascript-interview-questions/


1. Temporal Dead Zone :
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz

2. Closure :
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

3. JavaScript :
https://developer.mozilla.org/en-US/docs/Web/JavaScript

4. Hoisting :
 Hoisting : Variable can be used before it has been declared.
 
            JavaScript Hoisting : 

            https://www.geeksforgeeks.org/javascript-hoisting/

            What is hoisting with example in JavaScript?
            Hoisting in JavaScript is a behavior in which a function or a variable can be used before declaration. 
            For example, // using test before declaring console.log(test); // undefined var test; Run Code. The above program works and the output will be undefined .

            console.log(test); // undefined
            var test = "abc"; 

            interpreter see :

            var test;
            console.log(test); // undefined
            test = "abc";


5. Temporal Dead Zone :
- Temporal Dead Zone is the period of time during which the let and const declarations cannot be accessed.
- Temporal Dead Zone starts when the code execution enters the block which contains the let or const declaration and continues until the declaration has executed.  
-  Temporal deadzone is a time . since when this let variable are hoisted.

6. Lexical Scope :
 - Lexical scope is the definition area of an expression.
  In other words, an item's lexical scope is the place in which the item got created.
- JavaScript uses lexical scoping to resolve the variable names when a function is created inside another function. 
  It determines the function's parent scope by looking at where the function was created instead of where it was invoked.
- Lexical scope means that in a nested group of functions, the inner functions have access to the variables and other resources of their parent scope. 
  This means that the child's functions are lexically bound to the execution context of their parents.
   Lexical scope is sometimes also referred to as static scope.

7. Closure : 
- A function with lexical scope is known as closure. 

- In JavaScript, a Closure is a function that references variables in the outer scope from its inner scope. 
- The closure preserves the outer scope inside its inner scope even after outer function is returned.

- Closure is a function , when you create another function from function and inner function access all data of outer function
  or parent function even after the outer function completed. or done with its execution. Its called Closure.

- A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
In other words, a closure gives you access to an outer function's scope from an inner function. 
In JavaScript, closures are created every time a function is created, at function creation time.

- A closure is the combination of a function and the lexical environment within which that function was declared. 

- Closures are an ability of a function to remember the variables and functions that are declared in its outer scope.

- This ability of a function to store a variable for further reference even after it is executed is called Closure.



Important for closure :


Lexical Scope :
 - function ki outer value function ke andar access ho sakti hai,
   but function ki inner value function ke bahar access nahi hot sakti. 
 - We can access outer value/property inside inner function 
   but not access inner value/property of that function to outer /outside is called lexical scope.

   example :
   let data = 10;
        function test(){
            let a = 100;
            console.log("outer : ",data);
        }
        console.log("inner : ",a);  // throw error : Uncaught ReferenceError: a is not defined
        test();

8. Event propagation :
    Propagation refers to how events travel through the Document Object Model (DOM) tree. 
    The DOM tree is the structure which contains parent/child/sibling elements in relation to each other. 
    You can think of propagation as electricity running through a wire, until it reaches its destination.
    The event needs to pass through every node on the DOM until it reaches the end, or if it is forcibly stopped.
   

9. Event Bubbling :  ( Bottom To Top Approach ) : inner then outer
  - The Event bubbling in JavaScript is a type of event propagation. The event triggers the innermost target element and
   consecutively triggers the parent element of the target element in the same hierarchy until it triggers the outermost element.

  - Event bubbling is a method of event propagation in the HTML DOM API when an event is in an element inside another element, 
   and both elements have registered a handle to that event. It is a process that starts with the element that triggered the event and then bubbles up to the containing elements in the hierarchy. In event bubbling,
    the event is first captured and handled by the innermost element and then propagated to outer elements.

10. Event Capturing :  ( Top To Bottom Approach ) : outer then inner
  - The Event Capturing in JavaScript is a type of event propagation.same as Event Bubbling but Opposite.
    i.e. first parent then child.

11. Nullish Coalescing Operator : 
 - represent using '??'
 - It only checks undefined and null property. not check boolean,empty string,etc.

12. What is currying in JavaScript used for?
  - Currying is a checking method to make sure that you get everything you need before you proceed. 
  - It helps you to avoid passing the same variable again and again. It divides your function into multiple 
    smaller functions that can handle one responsibility.
  - Currying is when you break down a function that takes multiple arguments into a series of 
    functions that each take only one argument.
  - Currying is an advanced technique to transform a function of arguments n, to n functions of one or fewer arguments.

13. Pure Functinons are Predictable , Readable , Reusable , Testable.
    What is Pure Functions ?
    => Pure Function should always give you same output whenever pass the same Input.
    => not depend on outer variable 
    => pure function not use console.log because console is external api not js function.

    What is Side Effect ?
    => any Operation not directly related to final output of a function is called side effect.


14. Difference Between Promise and Async await :
     https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/#:~:text=Async%2FAwait%20is%20used%20to,which%20is%20easier%20to%20understand.
             
             Promise                                                                 Async / Await
     1.	Promise is an object representing intermediate                       Async/Await is a syntactic sugar for promises, 
        state of operation which is guaranteed to                            a wrapper making the code execute more synchronously.
         complete its execution at some point in future.	 
        
      2.	Promise has 3 states – resolved, rejected and pending.             	It does not have any states.
                                                                              It returns a promise either resolved or rejected.
            
      3.	If the function “fxn1” is to executed after the promise,            If the function “fxn1” is to executed after await,    
          then promise.then(fxn1) continues execution of the current          then await X() suspends execution of the current function  
           function after adding the fxn1 call to the callback chain.	         and then fxn1 is executed.

      4.	Error handling is done using .then() and .catch() methods.          	Error handling is done using .try() and .catch() methods.

      5.	Promise chains can become difficult to understand sometimes.	       Using Async/Await makes it easier to read and understand
                                                                                the flow of the program as compared to promise chains.                                           




 15. IIFE (Immediately Invoked Function Expression): 
   -> An IIFE is a Javascript that runs as soon as it is defined.
   -> It is a design pattern which is also  known as a Self-Executing Anonymous Function.
   -> Ex :
            (function(){
              /* Logic */
            })();
            
  
  16. Callback Function :
    -> A callback function is a function passed into another function as an argument ,
      which is then invoked inside the outer function to complete some task....
      Ex :
    function fun1(){
      console.log('function 1');
    }
    function fun2(callback){
        console.log('function 2');
        callback();
    }
    fun2(fun1);

    17. Higher Order Function :
      -> A Higher Order Function is a function that takes as an argument, or returns a function.
      Ex : map
      map(function(){

      })


    18. Some Important Links : 
       
      Difference Between class and Interface
      https://javatpoint.com/typescript-class-vs-interface#:~:text=Classes%20are%20the%20fundamental%20entities%20used%20to%20create%20reusable%20components,a%20contract%20in%20our%20application.

      example interface :
      https://www.itsolutionstuff.com/post/how-to-use-interface-in-angularexample.html

      example enum : defines list of named constants
      https://www.telerik.com/blogs/angular-basics-working-enums#:~:text=Enums%20are%20one%20of%20the,values%20to%20non%2Dconst%20enums.

      Enums are one of the features exclusive to TypeScript. We can use them to define a list of named constants, which lets us create easier-to-understand code by documenting distinct cases.

      TypeScript includes numeric and string-based enums. And we can also assign computed values to non-const enums.

 ** Topic ** 
Shallow copy and Deep copy :
https://www.geeksforgeeks.org/what-is-shallow-copy-and-deep-copy-in-javascript/#:~:text=This%20is%20known%20as%20shallow,other%20one%20ceases%20to%20exist.
 
  19. Shallow copy : 

     => From the above example, 
     => it is seen that when the name of newEmployee is modified, 
        it is also reflected for the old employee object. This can cause data inconsistency.This is known as shallow copy.

     => The newly created object has the same memory address as the old one. 

     => Hence, any change made to either of them changes the attributes for both. To overcome this problem, deep copy is used.
        If one of them is removed from memory, the other one ceases to exist. In a way the two objects are interdependent.

 20. Deep Copy :

    => Unlike the shallow copy,
    =>  deep copy makes a copy of all the members of the old object, 
        allocates separate memory location for the new object and then assigns the copied members to the new object. 
        
    => In this way, both the objects are independent of each other and in case of any modification to either one the other is not affected. 
        Also, if one of the objects is deleted the other still remains in the memory. 
        Now to create a deep copy of an object in JavaScript we use JSON.parse() and JSON.stringify() methods. 
        Let us take an example to understand it better.


21) Explain “this” keyword :

   => The “this” keyword refers to the object that the function is a property of.

   => The value of the “this” keyword will always depend on the object that is invoking the function.
   
   => Example 1 :
     
     function test(){
      console.log(this);
     }
     test();

     Since the function is invoked in the global context, the function is a property of the global object.
     Therefore, the output of the above code will be the global object.
     Since we ran the above code inside the browser, the global object is the window object.

     => Example 2 :

     var obj = {
    name:  "vivek",
    getName: function(){
    console.log(this.name);
     }
    }
   
    obj.getName();

    In the above code, at the time of invocation, the getName function is a property of the object obj ,
    therefore, this keyword will refer to the object obj, and hence the output will be “vivek”.

  

22) call | apply | bind : 
  
  => this functions are predefined functions in javascript .
  => used for function borrowing . i.e. we can borrow function from one object to another.

  1) call() :  It is called function borrowing.
     => call() allows an object to use method(function) of another object.
     => call() method takes arguments separately.

  2) apply() : pass argument as a arrayList.
     => The apply method is similar to the call() method. The only difference is that,
     => call() method takes arguments separately whereas, apply() method takes arguments as an array.

  3) bind() : 
     => using bind() we can create copy of our function and according to need we invoked it later.
     => not directly called first create copy.


23) What is memoization(Yad rakhna) : 
    => Memoization is a form of caching where the return value of a function is cached based on its parameters.
       If the parameter of that function is not changed, the cached version of the function is returned.
    => Note- Memoization is used for expensive function calls but in the following example,
        we are considering a simple function for understanding the concept of memoization better.
    

  function addTo256(num){
  return num + 256;
}
addTo256(20); // Returns 276
addTo256(40); // Returns 296
addTo256(20); // Returns 276
In the code above, we have written a function that adds the parameter to 256 and returns it.

When we are calling the function addTo256 again with the same parameter (“20” in the case above), we are computing the result again for the same parameter.

Computing the result with the same parameter, again and again, is not a big deal in the above case, but imagine if the function does some heavy-duty work, then, computing the result again and again with the same parameter will lead to wastage of time.

This is where memoization comes in, by using memoization we can store(cache) the computed results based on the parameters. If the same parameter is used again while invoking the function, instead of computing the result, we directly return the stored (cached) value.

Let’s convert the above function addTo256, to a memoized function:

function memoizedAddTo256(){
  var cache = {};

  return function(num){
    if(num in cache){
      console.log("cached value");
      return cache[num]
    }
    else{
      cache[num] = num + 256;
      return cache[num];
    }
  }
}
var memoizedFunc = memoizedAddTo256();

memoizedFunc(20); // Normal return
memoizedFunc(20); // Cached return
In the code above, if we run the memoizedFunc function with the same parameter, instead of computing the result again, it returns the cached result.

Note- Although using memoization saves time, it results in larger consumption of memory since we are storing all the computed results.


24) What are arrow functions?
   => Arrow functions were introduced in the ES6 version of javascript. 
      They provide us with a new and shorter syntax for declaring functions. 
      Arrow functions can only be used as a function expression.

25)  Rest parameter : 
    =>  rest parameter was introduced in the ES6 version of javascript.

    => Rest parameter ( … ):

     1) It provides an improved way of handling the parameters of a function.
     2) Using the rest parameter syntax, we can create functions that can take a variable number of arguments.
     3) Any number of arguments will be converted into an array using the rest parameter.
     4) It also helps in extracting all or some parts of the arguments.
     5) Rest parameters can be used by applying three dots (...) before the parameters.

     Ex : 
     function extractingArgs(...args){
          return args[1];
            }

         extractingArgs(8,9,1); // Returns 9

      **Note- Rest parameter should always be used at the last parameter of a function:

      Ex : function randomFunc2(a,b,...args){
                         //Do something
                        }

26) Spread operator :
   =>  Spread operator was introduced in the ES6 version of javascript.

   => Spread operator (…): 
       => Although the syntax of the spread operator is exactly the same as the rest parameter,
       => the spread operator is used to spreading an array, and object literals. 
       => We also use spread operators where one or more arguments are expected in a function call.
       => Spread Operator are use to clone array and object.
    
  => Ex :
             function addFourNumbers(num1,num2,num3,num4){
                return num1 + num2 + num3 + num4;
              }

              let fourNumbers = [5, 6, 7, 8];


              addFourNumbers(...fourNumbers);
              // Spreads [5,6,7,8] as 5,6,7,8

              let array1 = [3, 4, 5, 6];
              let clonedArray1 = [...array1];
              // Spreads the array into 3,4,5,6
              console.log(clonedArray1); // Outputs [3,4,5,6]


              let obj1 = {x:'Hello', y:'Bye'};
              let clonedObj1 = {...obj1}; // Spreads and clones obj1
              console.log(obj1);

              let obj2 = {z:'Yes', a:'No'};
              let mergedObj = {...obj1, ...obj2}; // Spreads both the objects and merges it
              console.log(mergedObj);
              // Outputs {x:'Hello', y:'Bye',z:'Yes',a:'No'};
  
  => 

  *** Note - Key differences between rest parameter and spread operator:

          Rest parameter is used to take a variable number of arguments and turns them into an array while
           the spread operator takes an array or an object and spreads it.
          Rest parameter is used in function declaration whereas the spread operator is used in function calls.
  

27) What is the use of promises in javascript?

   => Promises are used to handle asynchronous operations in javascript.

   => Before promises, callbacks were used to handle asynchronous operations. But due to the limited functionality of callbacks, using multiple callbacks to handle asynchronous code can lead to unmanageable code.

   => Promise object has four states -

      Pending - Initial state of promise. This state represents that the promise has neither been fulfilled nor been rejected, it is in the pending state.
      Fulfilled - This state represents that the promise has been fulfilled, meaning the async operation is completed.
      Rejected - This state represents that the promise has been rejected for some reason, meaning the async operation has failed.
      Settled - This state represents that the promise has been either rejected or fulfilled.
     
     => A promise is created using the Promise constructor which takes in a callback function with two parameters, resolve and reject respectively.

      const promise  = new Promise((resolve,reject)=>{});
      
     => "resolve" is a function that will be called when the async operation has been successfully completed.

     => "reject" is a function that will be called, when the async operation fails or if some error occurs.
    
  => Promises are used to handle asynchronous operations like server requests.

    promise.then(res => console.log(res)).catch(err => console.log(err));

     => "then()" method is used to access the result when the promise is fulfilled.

     => "catch()" method is used to access the result/error when the promise is rejected.


28) What are classes in javascript?
   => Introduced in the ES6 version, classes are nothing but syntactic sugars for constructor functions. 
   => They provide a new way of declaring constructor functions in javascript.  

   => Key points to remember about classes:

    => Unlike functions, classes are not hoisted. A class cannot be used before it is declared.
    => A class can inherit properties and methods from other classes by using the extend keyword.
    => All the syntaxes inside the class must follow the strict mode(‘use strict’) of javascript. An error will be thrown if the strict mode rules are not followed.
 
   => Below are the examples of how classes are declared and used:

   // Before ES6 version, using constructor functions => 
              function Student(name,rollNumber,grade,section){
                this.name = name;
                this.rollNumber = rollNumber;
                this.grade = grade;
                this.section = section;
              }

              // Way to add methods to a constructor function
              Student.prototype.getDetails = function(){
                return 'Name: ${this.name}, Roll no: ${this.rollNumber}, Grade: ${this.grade}, Section:${this.section}';
              }


              let student1 = new Student("Vivek", 354, "6th", "A");
              student1.getDetails();
              // Returns Name: Vivek, Roll no:354, Grade: 6th, Section:A

    // ES6 version classes =>
              class Student{
                constructor(name,rollNumber,grade,section){
                  this.name = name;
                  this.rollNumber = rollNumber;
                  this.grade = grade;
                  this.section = section;
                }

                // Methods can be directly added inside the class
                getDetails(){
                  return 'Name: ${this.name}, Roll no: ${this.rollNumber}, Grade:${this.grade}, Section:${this.section}';
                }
              }

              let student2 = new Student("Garry", 673, "7th", "C");
              student2.getDetails();
              // Returns Name: Garry, Roll no:673, Grade: 7th, Section:C


29) Explain WeakSet in javascript : 
   => In javascript, a Set is a collection of unique and ordered elements. 
   => Just like Set, WeakSet is also a collection of unique and ordered elements with some key differences:

     1)  Weakset contains "only objects" and no other type.
     2) An object inside the weakset is referenced weakly. This means, that if the object inside the weakset does not have a reference, it will be garbage collected.
     3) Unlike Set, WeakSet only has three methods, add() , delete() and has() .

     Ex : 
            const newSet = new Set([4, 5, 6, 7]);
            console.log(newSet);// Outputs Set {4,5,6,7}

            const newSet2 = new WeakSet([3, 4, 5]); //Throws an error


            let obj1 = {message:"Hello world"};
            const newSet3 = new WeakSet([obj1]);
            console.log(newSet3.has(obj1)); // true

30) Explain WeakMap in javascript :
    => In javascript, Map is used to store key-value pairs. 
    => The key-value pairs can be of both primitive and non-primitive types. WeakMap is similar to Map with key differences:

    => The keys and values in weakmap should always be an object.
    => If there are no references to the object, the object will be garbage collected.
    => Ex :
              const map1 = new Map();
              map1.set('Value', 1);

              const map2 = new WeakMap();
              map2.set('Value', 2.3); // Throws an error

              let obj = {name:"Vivek"};
              const map3 = new WeakMap();
              map3.set(obj, {age:23});


31)  Object destructuring  :
   => Object destructuring is a new way to extract elements from an object or an array.